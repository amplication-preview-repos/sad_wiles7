/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ClickPattern as PrismaClickPattern } from "@prisma/client";
import { ClickPatternDto } from "../ClickPatternDto";
import { AudioDto } from "../AudioDto";

export class ClickPatternServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClickPatternCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clickPattern.count(args);
  }

  async clickPatterns(
    args: Prisma.ClickPatternFindManyArgs
  ): Promise<PrismaClickPattern[]> {
    return this.prisma.clickPattern.findMany(args);
  }
  async clickPattern(
    args: Prisma.ClickPatternFindUniqueArgs
  ): Promise<PrismaClickPattern | null> {
    return this.prisma.clickPattern.findUnique(args);
  }
  async createClickPattern(
    args: Prisma.ClickPatternCreateArgs
  ): Promise<PrismaClickPattern> {
    return this.prisma.clickPattern.create(args);
  }
  async updateClickPattern(
    args: Prisma.ClickPatternUpdateArgs
  ): Promise<PrismaClickPattern> {
    return this.prisma.clickPattern.update(args);
  }
  async deleteClickPattern(
    args: Prisma.ClickPatternDeleteArgs
  ): Promise<PrismaClickPattern> {
    return this.prisma.clickPattern.delete(args);
  }
  async LogClick(args: ClickPatternDto): Promise<string> {
    throw new Error("Not implemented");
  }
  async PlayAudio(args: AudioDto): Promise<string> {
    throw new Error("Not implemented");
  }
}
