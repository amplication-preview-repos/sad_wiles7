/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClickPattern } from "./ClickPattern";
import { ClickPatternCountArgs } from "./ClickPatternCountArgs";
import { ClickPatternFindManyArgs } from "./ClickPatternFindManyArgs";
import { ClickPatternFindUniqueArgs } from "./ClickPatternFindUniqueArgs";
import { CreateClickPatternArgs } from "./CreateClickPatternArgs";
import { UpdateClickPatternArgs } from "./UpdateClickPatternArgs";
import { DeleteClickPatternArgs } from "./DeleteClickPatternArgs";
import { ClickPatternDto } from "../ClickPatternDto";
import { AudioDto } from "../AudioDto";
import { ClickPatternService } from "../clickPattern.service";
@graphql.Resolver(() => ClickPattern)
export class ClickPatternResolverBase {
  constructor(protected readonly service: ClickPatternService) {}

  async _clickPatternsMeta(
    @graphql.Args() args: ClickPatternCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClickPattern])
  async clickPatterns(
    @graphql.Args() args: ClickPatternFindManyArgs
  ): Promise<ClickPattern[]> {
    return this.service.clickPatterns(args);
  }

  @graphql.Query(() => ClickPattern, { nullable: true })
  async clickPattern(
    @graphql.Args() args: ClickPatternFindUniqueArgs
  ): Promise<ClickPattern | null> {
    const result = await this.service.clickPattern(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClickPattern)
  async createClickPattern(
    @graphql.Args() args: CreateClickPatternArgs
  ): Promise<ClickPattern> {
    return await this.service.createClickPattern({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClickPattern)
  async updateClickPattern(
    @graphql.Args() args: UpdateClickPatternArgs
  ): Promise<ClickPattern | null> {
    try {
      return await this.service.updateClickPattern({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClickPattern)
  async deleteClickPattern(
    @graphql.Args() args: DeleteClickPatternArgs
  ): Promise<ClickPattern | null> {
    try {
      return await this.service.deleteClickPattern(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => String)
  async LogClick(
    @graphql.Args()
    args: ClickPatternDto
  ): Promise<string> {
    return this.service.LogClick(args);
  }

  @graphql.Mutation(() => String)
  async PlayAudio(
    @graphql.Args()
    args: AudioDto
  ): Promise<string> {
    return this.service.PlayAudio(args);
  }
}
