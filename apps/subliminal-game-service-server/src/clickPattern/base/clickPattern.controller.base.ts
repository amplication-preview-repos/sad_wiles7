/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClickPatternService } from "../clickPattern.service";
import { ClickPatternCreateInput } from "./ClickPatternCreateInput";
import { ClickPattern } from "./ClickPattern";
import { ClickPatternFindManyArgs } from "./ClickPatternFindManyArgs";
import { ClickPatternWhereUniqueInput } from "./ClickPatternWhereUniqueInput";
import { ClickPatternUpdateInput } from "./ClickPatternUpdateInput";
import { AudioDto } from "../AudioDto";

export class ClickPatternControllerBase {
  constructor(protected readonly service: ClickPatternService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClickPattern })
  async createClickPattern(
    @common.Body() data: ClickPatternCreateInput
  ): Promise<ClickPattern> {
    return await this.service.createClickPattern({
      data: data,
      select: {
        coordinates: true,
        createdAt: true,
        id: true,
        time: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClickPattern] })
  @ApiNestedQuery(ClickPatternFindManyArgs)
  async clickPatterns(@common.Req() request: Request): Promise<ClickPattern[]> {
    const args = plainToClass(ClickPatternFindManyArgs, request.query);
    return this.service.clickPatterns({
      ...args,
      select: {
        coordinates: true,
        createdAt: true,
        id: true,
        time: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClickPattern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clickPattern(
    @common.Param() params: ClickPatternWhereUniqueInput
  ): Promise<ClickPattern | null> {
    const result = await this.service.clickPattern({
      where: params,
      select: {
        coordinates: true,
        createdAt: true,
        id: true,
        time: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClickPattern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClickPattern(
    @common.Param() params: ClickPatternWhereUniqueInput,
    @common.Body() data: ClickPatternUpdateInput
  ): Promise<ClickPattern | null> {
    try {
      return await this.service.updateClickPattern({
        where: params,
        data: data,
        select: {
          coordinates: true,
          createdAt: true,
          id: true,
          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClickPattern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClickPattern(
    @common.Param() params: ClickPatternWhereUniqueInput
  ): Promise<ClickPattern | null> {
    try {
      return await this.service.deleteClickPattern({
        where: params,
        select: {
          coordinates: true,
          createdAt: true,
          id: true,
          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/logClick")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async LogClick(
    @common.Body()
    body: AudioDto
  ): Promise<string> {
    return this.service.LogClick(body);
  }

  @common.Post("/playAudio")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async PlayAudio(
    @common.Body()
    body: AudioDto
  ): Promise<string> {
    return this.service.PlayAudio(body);
  }
}
