/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Affirmation as PrismaAffirmation } from "@prisma/client";

export class AffirmationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AffirmationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.affirmation.count(args);
  }

  async affirmations(
    args: Prisma.AffirmationFindManyArgs
  ): Promise<PrismaAffirmation[]> {
    return this.prisma.affirmation.findMany(args);
  }
  async affirmation(
    args: Prisma.AffirmationFindUniqueArgs
  ): Promise<PrismaAffirmation | null> {
    return this.prisma.affirmation.findUnique(args);
  }
  async createAffirmation(
    args: Prisma.AffirmationCreateArgs
  ): Promise<PrismaAffirmation> {
    return this.prisma.affirmation.create(args);
  }
  async updateAffirmation(
    args: Prisma.AffirmationUpdateArgs
  ): Promise<PrismaAffirmation> {
    return this.prisma.affirmation.update(args);
  }
  async deleteAffirmation(
    args: Prisma.AffirmationDeleteArgs
  ): Promise<PrismaAffirmation> {
    return this.prisma.affirmation.delete(args);
  }
}
