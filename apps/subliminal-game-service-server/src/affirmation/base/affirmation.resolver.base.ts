/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Affirmation } from "./Affirmation";
import { AffirmationCountArgs } from "./AffirmationCountArgs";
import { AffirmationFindManyArgs } from "./AffirmationFindManyArgs";
import { AffirmationFindUniqueArgs } from "./AffirmationFindUniqueArgs";
import { CreateAffirmationArgs } from "./CreateAffirmationArgs";
import { UpdateAffirmationArgs } from "./UpdateAffirmationArgs";
import { DeleteAffirmationArgs } from "./DeleteAffirmationArgs";
import { AffirmationService } from "../affirmation.service";
@graphql.Resolver(() => Affirmation)
export class AffirmationResolverBase {
  constructor(protected readonly service: AffirmationService) {}

  async _affirmationsMeta(
    @graphql.Args() args: AffirmationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Affirmation])
  async affirmations(
    @graphql.Args() args: AffirmationFindManyArgs
  ): Promise<Affirmation[]> {
    return this.service.affirmations(args);
  }

  @graphql.Query(() => Affirmation, { nullable: true })
  async affirmation(
    @graphql.Args() args: AffirmationFindUniqueArgs
  ): Promise<Affirmation | null> {
    const result = await this.service.affirmation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Affirmation)
  async createAffirmation(
    @graphql.Args() args: CreateAffirmationArgs
  ): Promise<Affirmation> {
    return await this.service.createAffirmation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Affirmation)
  async updateAffirmation(
    @graphql.Args() args: UpdateAffirmationArgs
  ): Promise<Affirmation | null> {
    try {
      return await this.service.updateAffirmation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Affirmation)
  async deleteAffirmation(
    @graphql.Args() args: DeleteAffirmationArgs
  ): Promise<Affirmation | null> {
    try {
      return await this.service.deleteAffirmation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
