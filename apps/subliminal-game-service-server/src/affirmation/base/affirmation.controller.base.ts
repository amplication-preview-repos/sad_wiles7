/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AffirmationService } from "../affirmation.service";
import { AffirmationCreateInput } from "./AffirmationCreateInput";
import { Affirmation } from "./Affirmation";
import { AffirmationFindManyArgs } from "./AffirmationFindManyArgs";
import { AffirmationWhereUniqueInput } from "./AffirmationWhereUniqueInput";
import { AffirmationUpdateInput } from "./AffirmationUpdateInput";

export class AffirmationControllerBase {
  constructor(protected readonly service: AffirmationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Affirmation })
  async createAffirmation(
    @common.Body() data: AffirmationCreateInput
  ): Promise<Affirmation> {
    return await this.service.createAffirmation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        image: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Affirmation] })
  @ApiNestedQuery(AffirmationFindManyArgs)
  async affirmations(@common.Req() request: Request): Promise<Affirmation[]> {
    const args = plainToClass(AffirmationFindManyArgs, request.query);
    return this.service.affirmations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        image: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Affirmation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async affirmation(
    @common.Param() params: AffirmationWhereUniqueInput
  ): Promise<Affirmation | null> {
    const result = await this.service.affirmation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        image: true,
        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Affirmation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAffirmation(
    @common.Param() params: AffirmationWhereUniqueInput,
    @common.Body() data: AffirmationUpdateInput
  ): Promise<Affirmation | null> {
    try {
      return await this.service.updateAffirmation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          image: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Affirmation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAffirmation(
    @common.Param() params: AffirmationWhereUniqueInput
  ): Promise<Affirmation | null> {
    try {
      return await this.service.deleteAffirmation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          image: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
